[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "text2sql"
version = "0.1.0"
description = "Modern Text-to-SQL system using LangChain, LangGraph, and advanced SQL engines"
readme = "README.md"
requires-python = ">=3.11"
license = {file = "LICENSE"}
authors = [
    {name = "Bharat Raghunathan", email = "bharatraghunthan9767@gmail.com"},
]
keywords = ["sql", "llm", "text2sql", "langchain", "langgraph"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core framework
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",

    # Latest LangChain ecosystem
    "langchain>=0.2.0",
    "langchain-core>=0.2.0",
    "langchain-community>=0.2.0",
    "langgraph>=0.1.0",
    "langsmith>=0.1.0",

    # LLM providers
    "langchain-openai>=0.1.0",
    "langchain-anthropic>=0.1.0",
    "langchain-together>=0.1.0",

    # Database and SQL
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    "aiosqlite>=0.19.0",         # SQLite async driver (primary)

    # Redis and caching
    "redis[hiredis]>=5.0.0",
    "aioredis>=2.0.1",

    # Configuration and environment
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "click>=8.1.7",

    # Monitoring and logging
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",

    # HTTP client
    "httpx>=0.25.2",
    "aiofiles>=23.2.1",

    # Data processing
    "pandas>=2.1.4",
    "numpy>=1.26.2",

    # Security
    "cryptography>=41.0.7",
    "python-jose[cryptography]>=3.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",
    "factory-boy>=3.3.0",
]

lint = [
    "ruff>=0.1.6",
    "mypy>=1.7.1",
    "types-redis>=4.6.0",
    "types-pyyaml>=6.0.12",
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/bharatr21/text2sql"
Repository = "https://github.com/bharatr21/text2sql"
Documentation = "https://github.com/bharatr21/text2sql/docs"

[project.scripts]
text2sql = "text2sql.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "T20", # flake8-print
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["T20", "ARG", "S101"]

[tool.ruff.isort]
known-first-party = ["text2sql"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/text2sql",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]